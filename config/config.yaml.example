# Event source
scraping:
  url: "https://www.richmond.gov.uk/services/parking/cpz/twickenham_events"
  max_retries: 3 # Number of retry attempts on failure
  retry_delay: 5 # Seconds to wait between retry attempts
  timeout: 10 # Request timeout in seconds

# Application identity for Home Assistant device discovery
app:
  unique_id_prefix: "twickenham_events"
  name: "Twickenham Events"
  manufacturer: "ronschaeffer" # Default manufacturer (was "Ron Schaeffer")
  model: "Twick Events" # Simplified model name (was "Event Scraper v1.0")
  sw_version: "0.1.0"
  # Public project / repository URL (used in discovery origin block 'o.url')
  url: "https://github.com/ronschaeffer/twickenham_events"

# Rules for determining when an event is over
event_rules:
  end_of_day_cutoff: "23:00" # Time to consider all events for the day over
  next_event_delay_hours: 1 # Hours after an event starts before it's considered over (if another event follows)

# MQTT Configuration
mqtt:
  enabled: true
  broker_url: "${MQTT_BROKER_URL}" # Environment variable: your-broker.example.com
  broker_port: "${MQTT_BROKER_PORT}" # Environment variable: 8883 or 1883
  client_id: "${MQTT_CLIENT_ID}" # Environment variable: your_client_id
  security: "${MQTT_SECURITY}"

  # Authentication settings
  auth:
    username: "${MQTT_USERNAME}" # Environment variable
    password: "${MQTT_PASSWORD}" # Environment variable

  # TLS settings
  tls:
    ca_cert: "${TLS_CA_CERT}"
    client_cert: "${TLS_CLIENT_CERT}"
    client_key: "${TLS_CLIENT_KEY}"
    verify: "${TLS_VERIFY}"

  topics:
    next: "twickenham_events/events/next"
    next_day_summary: "twickenham_events/events/next_day_summary"
    all_upcoming: "twickenham_events/events/all_upcoming"
    status: "twickenham_events/status"
  today: "twickenham_events/events/today" # Count + attributes for today's events

  # Last Will and Testament - Published when client disconnects unexpectedly
  last_will:
    topic: "twickenham_events/status" # Same as status topic for consistency
    payload: '{"status": "offline", "last_seen": "unexpected_disconnect", "event_count": 0, "error_count": 1, "errors": ["Client disconnected unexpectedly"]}'
    qos: 1 # Ensure delivery (0=fire&forget, 1=at_least_once, 2=exactly_once)
    retain: true # Retain message so subscribers see offline status immediately

# Home Assistant Integration
home_assistant:
  enabled: "${HOME_ASSISTANT_ENABLED}"
  discovery_prefix: "homeassistant" # Default Home Assistant discovery topic

# ICS Calendar Export
calendar:
  enabled: "${CALENDAR_ENABLED}"
  filename: "twickenham_events.ics"
  output_format: "ics" # Options: "ics", "json", "both"
  scope:
    include_past_days: 30 # Include events from last 30 days
    include_future_days: 365 # Include events for next year
  duration_estimation:
    default_hours: 2.5 # Duration for all events

# Event Name Processing (AI-powered)
ai_processor:
  api_key: "${GEMINI_API_KEY}" # Environment variable

  # Event Type Detection (for icons and categorization)
  type_detection:
    enabled: "${TYPE_DETECTION_ENABLED}"
    cache_enabled: true
    model: "gemini-2.5-pro"
    cache_dir: "output/cache"

  # Event Name Shortening
  shortening:
    enabled: "${SHORTENING_ENABLED}"
    cache_enabled: true
    model: "gemini-2.5-pro"
    max_length: 25
    flags_enabled: "${FLAGS_ENABLED}"
    standardize_spacing: true
    cache_dir: "output/cache"
    prompt_template: >
      You are an expert editor. Your task is to shorten event names
      to fit within {char_limit} display units while keeping them recognizable.
      Count regular characters as 1 unit each, and flag emojis as 2 units each.
      The events are usually rugby matches, but can also be concerts.
      Use standard abbreviations. IMPORTANT: Always capitalize country abbreviations
      (ENG, AUS, NZ, ARG, RSA, FRA, ITA, WAL, SCO, IRE, FIJ, etc.).
      {flag_instructions}

      Examples:
      fixture: Women's Rugby World Cup Final
      fixture_short: W RWC Final

      {flag_examples}

      fixture: Taylor Swift | The Eras Tour
      fixture_short: Taylor Swift

      fixture: Harlequins Big Game
      fixture_short: Quins Big Game
      ---
      Now, shorten this event name:
      fixture: {event_name}
      fixture_short:

# Web Server Configuration
web_server:
  enabled: "${WEB_SERVER_ENABLED}" # Environment variable: true/false
  host: "${WEB_SERVER_HOST}" # Environment variable: 0.0.0.0 (all interfaces) or 127.0.0.1 (localhost only)
  port: "${WEB_SERVER_PORT}" # Environment variable: 8080 (or any available port like 47476)
  # Optional: Auto-discovery base URL for external access (handles Docker/proxy issues)
  external_url_base: "${WEB_SERVER_EXTERNAL_URL}" # e.g., "https://your-domain.com/twickenham"
  # Access logging and debug settings
  access_log: "${WEB_SERVER_ACCESS_LOG}" # Environment variable: true/false (default: false)
  # Development settings
  reload: false # Enable auto-reload for development (not recommended for production)
  # Security headers and CORS (if needed for browser access)
  cors:
    enabled: "${WEB_SERVER_CORS_ENABLED}" # Environment variable: true/false
    origins: "${WEB_SERVER_CORS_ORIGINS}" # Environment variable: comma-separated origins

# Service/daemon settings
service:
  interval_seconds: 14400
  enable_buttons: true
  discovery_prefix: "homeassistant"
  systemd:
    auto_launch: true # Start the systemd unit when restart is requested
    unit: "twickenham-events.service"
    user: true # Use --user systemd (per-user service)
    delay_seconds: 2 # Small delay before exit to allow start
